setwd("E:/MR/blackFriday")
library(data.table)

train=fread("train.csv",stringsAsFactors=T)
test=fread("test.csv",stringsAsFactors=T)
dim(train)
str(train)

#first prediction using mean
sub_mean=data.frame(User_ID=test$User_ID,Product_ID=test$Product_ID,Purchase=mean(train$Purchase))
write.csv(sub_mean,file="h2ofirstsub.csv",row.names=F)

summary(train)
summary(test)

#combine data set
test[,Purchase:=mean(train$Purchase)]
c=list(train,test)
combin=rbindlist(c)

#analyzing gender variable
combin[,prop.table(table(Gender))]
#age variable
combin[,prop.table(table(Age))]
#city category variable
combin[,prop.table(table(City_Category))]
#stay in current years variable
combin[,prop.table(table(Stay_In_Current_City_Years))]

#unique values in Id variables
length(unique(combin$Product_ID))
length(unique(combin$User_ID))

#missing values
colSums(is.na(combin))

library(ggplot2)
#age vs gender
ggplot(combin,aes(Age,fill=Gender))+geom_bar()
#age vs city
ggplot(combin,aes(Age,fill=City_Category))+geom_bar()

library(gmodels)
CrossTable(combin$Occupation,combin$City_Category)

#create a new variable for missing values
combin[,Product_Category_2_NA:=ifelse(sapply(combin$Product_Category_2,is.na)==TRUE,1,0)]
Product_Category_3_NA=ifelse(is.na(combin$Product_Category_3)==TRUE,1,0)
combin$Product_Category_3_NA=Product_Category_3_NA

#impute missing values
combin[,Product_Category_2:=ifelse(is.na(combin$Product_Category_2)==TRUE,"-999",Product_Category_2)]
combin[,Product_Category_3:=ifelse(is.na(combin$Product_Category_3)==TRUE,"-999",Product_Category_3)]

#set column level
levels(combin$Stay_In_Current_City_Years)[combin$Stay_In_Current_City_Years=="4+"]="4"

#recoding age groups
levels(combin$Age)[levels(combin$Age) == "0-17"] = 0
levels(combin$Age)[levels(combin$Age) == "18-25"] = 1
levels(combin$Age)[levels(combin$Age) == "26-35"] = 2
levels(combin$Age)[levels(combin$Age) == "36-45"] = 3
levels(combin$Age)[levels(combin$Age) == "46-50"] = 4
levels(combin$Age)[levels(combin$Age) == "51-55"] = 5
levels(combin$Age)[levels(combin$Age) == "55+"]=6	

#convet age to numeric
combin$Age=as.numeric(combin$Age)
#convet gender to numeric
combin$Gender=as.numeric(combin$Gender)

#User,product count
combin[,User_Count:=.N,by=User_ID]
combin[,Product_Count:=.N,by=Product_ID]

#mean purchase 
combin[,Mean_Purchase_Product:=mean(Purchase),by=Product_ID]
combin[,Mean_Purchase_User:=mean(Purchase),by=User_ID]

#one hot encoding of city category variable
library(dummies)
combin=dummy.data.frame(combin,names=c("City_Category"),sep="_")

#check classes of all variables
sapply(combin,class)
combin$Product_Category_2=as.integer(combin$Product_Category_2)
combin$Product_Category_3=as.integer(combin$Product_Category_3)

#divde into train test
c.train=combin[1:nrow(train),]
c.test=combin[-(1:nrow(train)),]

c.train=c.train[c.train$Product_Category_1<=18,]

#modeling
library(h2o)

localH2O=h2o.init(nthreads=-1)
h2o.init()

#data to h2o cluster
train.h2o=as.h2o(c.train)
test.h2o=as.h2o(c.test)
colnames(train.h2o)
#dependent variable
y.dep=14
#independent variable
x.indep=c(3:13,15:20)

#MULTIPLE REGRESSION IN H2O
regression.model=h2o.glm(y=y.dep,x=x.indep,training_frame=train.h2o,family="gaussian")
h2o.performance(regression.model)
#predictions
predict.reg=as.data.frame(h2o.predict(regression.model,test.h2o))
sub_reg=data.frame(User_ID=test$User_ID,Product_ID=test$Product_ID,Purchase=predict.reg$predict)
write.csv(sub_reg,"h2oregression.csv",row.names=F)

#RANDOM FOREST IN H2O
system.time(
(rf.model=h2o.randomForest(y=y.dep,x=x.indep,training_frame=train.h2o,ntrees=1000,mtries=3,max_depth=4,seed=1122))
)
h2o.performance(rf.model)
system.time((predict.rforest=as.data.frame(h2o.predict(rf.model,test.h2o))))
sub_rf=data.frame(User_ID=test$User_ID,Product_ID=test$Product_ID,Purchase=predict.rforest$predict)
write.csv(sub_rf,"h2orf.csv",row.names=F)

#GBM IN H2O
system.time(
(gbm.model=h2o.gbm(y=y.dep,x=x.indep,training_frame=train.h2o,ntrees=1000,max_depth=4,learn_rate=0.01,seed=1122))
)
h2o.performance(gbm.model)
predict.gbm=as.data.frame(h2o.predict(gbm.model,test.h2o))
sub_gbm=data.frame(User_ID=test$User_ID,Product_ID=test$Product_ID,Purchase=predict.gbm$predict)
write.csv(sub_gbm,"h2ogbm.csv",row.names=F)
